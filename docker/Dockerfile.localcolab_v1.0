## Issue - I don't know how to specify where the DB is. Otherwise, maybe working?

# Copyright 2021 DeepMind Technologies Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Modifications for Sydney Uni:
# Set base image to be ubuntu 16.04 and cuda10.2 to run on our HPC
# contact sih.info@sydney.edu.au
# Conda version now hardcoded.
#
# Build with:
# sudo docker build -t sydneyinformaticshub/alphafold .
# python -c "import tensorflow as tf; print(len(tf.config.list_physical_devices('GPU')))"
#
# Push with:
# sudo docker push sydneyinformaticshub/alphafold
#
# Run with:
# sudo docker run -it --gpus=all sydneyinformaticshub/alphafold /bin/bash -c "python /app/alphafold/alphafold-2.3.2/run_alphafold.py \
#   --data_dir=${ALPHADB} \
#   --uniref90_database_path=${ALPHADB}/uniref90/uniref90.fasta \
#   --mgnify_database_path=${ALPHADB}/mgnify/mgy_clusters_2018_12.fa \
#   --template_mmcif_dir=${ALPHADB}/pdb_mmcif/mmcif_files/ \
#   --obsolete_pdbs_path=${ALPHADB}/pdb_mmcif/obsolete.dat \
#   --fasta_paths=/project/Training/DATA/input.fasta \
#   --output_dir=${WORKDIR}/output_directory_gpu \
#   --db_preset=full_dbs \
#   --max_template_date=2022-03-23 \
#   --use_gpu_relax=True \
#   --model_preset=monomer \
#   --pdb70_database_path=${ALPHADB}/pdb70/pdb70 \
#   --bfd_database_path=${ALPHADB}/bfd/bfd_metaclust_clu_complete_id30_c90_final_seq.sorted_opt \
#   --uniref30_database_path=${ALPHADB}/uniclust30/uniclust30_2018_08/uniclust30_2018_0 \
#  "
# export SINGULARITY_CACHEDIR=`pwd`
# export SINGULARITY_TMPDIR=`pwd`
# singularity build alpha.img docker://sydneyinformaticshub/alphafold

FROM nbutter/pytorch:ubuntu1604

RUN wget -q -P /tmp \
  https://repo.anaconda.com/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh \
    && bash /tmp/Miniconda3-py37_4.10.3-Linux-x86_64.sh -b -p /opt/conda \
    && rm /tmp/Miniconda3-py37_4.10.3-Linux-x86_64.sh

# There is another version of conda in the base image, remove it.
RUN rm -rf /build/miniconda3
ENV PATH="/opt/conda/bin:$PATH"
RUN which conda

RUN conda install -y pip

ARG GIT_REPO="https://github.com/deepmind/alphafold"
ARG SOURCE_URL="https://storage.googleapis.com/alphafold/alphafold_params_2021-07-14.tar"
ENV COLABFOLDDIR="/opt/colabfold"
ARG PARAMS_DIR="${COLABFOLDDIR}/alphafold/data/params"
ENV MSATOOLS="${COLABFOLDDIR}/tools"

# download the original alphafold as "${COLABFOLDDIR}"
# echo "downloading the original alphafold as ${COLABFOLDDIR}..."
# rm -rf ${COLABFOLDDIR}
RUN git clone ${GIT_REPO} ${COLABFOLDDIR}
RUN (cd ${COLABFOLDDIR}; git checkout 1d43aaff941c84dc56311076b58795797e49107b --quiet)

# colabfold patches
# echo "Applying several patches to be Alphafold2_advanced..."
WORKDIR ${COLABFOLDDIR}
RUN wget -qnc https://raw.githubusercontent.com/sokrypton/ColabFold/7cdf59d97f17cc09bc638f8de610876e49d1347c/colabfold/colabfold.py
RUN wget -qnc https://raw.githubusercontent.com/sokrypton/ColabFold/7cdf59d97f17cc09bc638f8de610876e49d1347c/beta/colabfold_alphafold.py
RUN wget -qnc https://raw.githubusercontent.com/sokrypton/ColabFold/7cdf59d97f17cc09bc638f8de610876e49d1347c/beta/pairmsa.py
RUN wget -qnc https://raw.githubusercontent.com/sokrypton/ColabFold/03d3312d91a5c91acb0249dacd65a39f41469e7b/beta/protein.patch
RUN wget -qnc https://raw.githubusercontent.com/sokrypton/ColabFold/03d3312d91a5c91acb0249dacd65a39f41469e7b/beta/config.patch
RUN wget -qnc https://raw.githubusercontent.com/sokrypton/ColabFold/03d3312d91a5c91acb0249dacd65a39f41469e7b/beta/model.patch
RUN wget -qnc https://raw.githubusercontent.com/sokrypton/ColabFold/03d3312d91a5c91acb0249dacd65a39f41469e7b/beta/modules.patch
RUN wget -qnc https://raw.githubusercontent.com/YoshitakaMo/localcolabfold/b374358b479af4e311537502d09225b826118575/gpurelaxation.patch -O gpurelaxation.patch

# donwload reformat.pl from hh-suite
RUN wget -qnc https://raw.githubusercontent.com/soedinglab/hh-suite/master/scripts/reformat.pl
# Apply multi-chain patch from Lim Heo @huhlim
RUN patch -u alphafold/common/protein.py -i protein.patch && \
patch -u alphafold/model/model.py -i model.patch && \
patch -u alphafold/model/modules.py -i modules.patch && \
patch -u alphafold/model/config.py -i config.patch

# Downloading stereo_chemical_props.txt from https://git.scicore.unibas.ch/schwede/openstructure
RUN wget -q https://git.scicore.unibas.ch/schwede/openstructure/-/raw/7102c63615b64735c4941278d92b554ec94415f8/modules/mol/alg/src/stereo_chemical_props.txt --no-check-certificate
RUN mkdir -p ${COLABFOLDDIR}/alphafold/common && \
mv stereo_chemical_props.txt ${COLABFOLDDIR}/alphafold/common

# Install the conda/pip packages
RUN conda install -c conda-forge cudatoolkit==10.2.89 -y
RUN conda install -c conda-forge openmm==7.5.0 -y
RUN conda install -c conda-forge pdbfixer==1.7 -y
RUN conda install -c bioconda hmmer==3.3.2 hhsuite==3.3.0 -y
RUN python -m pip install absl-py==0.13.0 biopython==1.79 chex==0.0.7 dm-haiku==0.0.4 dm-tree==0.1.6 immutabledict==2.0.0 jax==0.2.14 ml-collections==0.1.0 numpy==1.19.5 scipy==1.7.0 tensorflow-gpu==2.5.0
RUN python -m pip install jupyter matplotlib py3Dmol tqdm
RUN python -m pip install -U https://storage.googleapis.com/jax-releases/cuda102/jaxlib-0.1.71+cuda102-cp37-none-manylinux2010_x86_64.whl

# Apply OpenMM patch.
RUN cd /opt/conda/lib/python3.7/site-packages && patch -p0 < ${COLABFOLDDIR}/docker/openmm.patch

# Enable GPU-accelerated relaxation.
RUN cd ${COLABFOLDDIR} && patch -u alphafold/relax/amber_minimize.py -i gpurelaxation.patch
RUN cd ${COLABFOLDDIR} && wget -q "https://raw.githubusercontent.com/YoshitakaMo/localcolabfold/b374358b479af4e311537502d09225b826118575/runner.py"
RUN cd ${COLABFOLDDIR} && wget -q "https://raw.githubusercontent.com/YoshitakaMo/localcolabfold/b374358b479af4e311537502d09225b826118575/runner_af2advanced.py"

# echo "Making standalone command 'colabfold'..."
RUN cd ${COLABFOLDDIR} && mkdir -p bin
RUN echo $'#!/bin/bash \n\
export NVIDIA_VISIBLE_DEVICES="all" \n\
export TF_FORCE_UNIFIED_MEMORY="1" \n\
export XLA_PYTHON_CLIENT_MEM_FRACTION="4.0" \n\
export COLABFOLD_PATH="${COLABFOLDDIR}" \n\
python ${COLABFOLDDIR}/runner_af2advanced.py \$@' > ${COLABFOLDDIR}/bin/colabfold

ENV PATH="/opt/colabfold/bin:$PATH"

# RUN python ${COLABFOLDDIR}/runner_af2advanced.py \$@ && EOF
RUN chmod +x /opt/colabfold/bin/colabfold
# cd ${COLABFOLDDIR}
RUN wget -qnc https://raw.githubusercontent.com/YoshitakaMo/localcolabfold/b374358b479af4e311537502d09225b826118575/residue_constants.patch -O residue_constants.patch
RUN wget -qnc https://raw.githubusercontent.com/YoshitakaMo/localcolabfold/b374358b479af4e311537502d09225b826118575/colabfold_alphafold.patch -O colabfold_alphafold.patch
RUN patch -u alphafold/common/residue_constants.py -i residue_constants.patch
RUN patch -u colabfold_alphafold.py -i colabfold_alphafold.patch

# Downloading parameter files
RUN mkdir -p ${PARAMS_DIR} && \
curl -fL ${SOURCE_URL} | tar x -C ${PARAMS_DIR}

# echo "Installation of Alphafold2_advanced finished."
# Use 'Agg' for non-GUI backend
# cd ${COLABFOLDDIR}/colabfold-conda/lib/python3.10/site-packages/colabfold
# sed -i -e "s#from matplotlib import pyplot as plt#import matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt#g" plot.py
# modify the default params directory
# sed -i -e "s#appdirs.user_cache_dir(__package__ or \"colabfold\")#\"${COLABFOLDDIR}/colabfold\"#g" download.py
# remove cache directory
# rm -rf __pycache__
